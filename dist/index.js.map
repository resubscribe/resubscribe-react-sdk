{"version":3,"sources":["../src/index.tsx","../src/util.ts"],"sourcesContent":["import React, { useEffect, useMemo } from 'react';\nimport { css, styled, setup, keyframes } from 'goober';\nimport { create } from 'zustand';\nimport { apiUrl, baseUrl, cx, domain, getNavigatorLanguage, isDarkColor, reduceOpacity } from './util';\n\nsetup(React.createElement);\n\ntype AIType = 'intent' | 'churn' | 'delete' | 'subscriber' | 'presubscription' | 'precancel';\n\ntype CloseFn = (via: 'cancel-consent' | 'close') => void;\n\ntype State = 'closed' | 'confirming' | 'open';\nconst useStore = create<{\n  state: State;\n  options: Options | null;\n  openConsent: (options: Options) => void;\n  close: () => void;\n}>((set) => ({\n  state: 'closed' as State,\n  options: null as Options | null,\n  openConsent: (options: Options) => set({ state: 'confirming', options }),\n  close: () => set({ state: 'closed', options: null }),\n}));\n\ninterface Colors {\n  primary: string;\n  text: string;\n  background: string;\n}\n\ninterface Options {\n  /**\n   * The slug of the organization\n   */\n  slug: string;\n  /**\n   * The type of AI to use.\n   */\n  aiType: AIType;\n  /**\n   * The user's id to record the conversation.\n   */\n  userId: string;\n  /**\n   * Override for the title in the dialog.\n   */\n  title?: string;\n  /**\n   * Override for the description in the dialog.\n   */\n  description?: string;\n  /**\n   * Override for the primary button text in the dialog.\n   */\n  primaryButtonText?: string;\n  /**\n   * Override for the cancel button text in the dialog.\n   */\n  cancelButtonText?: string;\n  /**\n   * Callback when the component is closed. Use the via parameter to identify how the modal was closed.\n   */\n  onClose?: CloseFn;\n  /**\n   * Color settings.\n   */\n  colors?: Colors;\n}\n\n/**\n * Get default titles for each AI type.\n */\nconst getTitle = (aiType: AIType) => {\n  switch (aiType) {\n    case 'intent':\n      return 'Not ready to pay?';\n    case 'churn':\n      return 'We\\'re sorry to see you go';\n    case 'delete':\n      return 'We\\'re sorry to see you go';\n    case 'subscriber':\n      return 'Would you like to tell us about your experience?';\n    case 'presubscription':\n      return 'Can we ask you a few questions?';\n    case 'precancel':\n      return 'Can we ask you a few questions?';\n  }\n};\n\n/**\n * Get default descriptions for each AI type.\n */\nconst getDescription = (aiType: AIType) => {\n  switch (aiType) {\n    case 'intent':\n      return 'Can we ask you a few questions? It should only take a few minutes.';\n    case 'churn':\n      return 'Can we ask you a few questions? It should only take a few minutes.';\n    case 'delete':\n      return 'Can we ask you a few questions? It should only take a few minutes.';\n    case 'subscriber':\n      return 'Can we ask you a few questions? It should only take a few minutes.';\n    case 'presubscription':\n      return 'We\\'d love to hear your thoughts. It should only take a few minutes.';\n    case 'precancel':\n      return 'We\\'d love to hear your thoughts. It should only take a few minutes.';\n  }\n}\n\nconst Button = styled('div')`\n  flex: 1;\n  text-align: center;\n  padding: 0.5rem 0.75rem;\n  background-color: ${(props: any) => props.bgcolor || '#000'};\n  color: ${(props: any) => props.color || '#fff'};\n  ${props => props.secondarycolor ? `\n    border-width: 1px;\n    border-style: solid;\n    border-color: ${reduceOpacity(props.secondaryColor, 0.3) || '#d4d7de'};\n  ` : `\n    border: none;\n  `}\n  font-size: 0.875rem;\n  font-weight: 600;\n  border-radius: 6px;\n  cursor: pointer;\n`\n\nconst containerAnimation = `\n0% {opacity:.5;}\n100% {opacity:1;}\n`;\nconst Container: React.FunctionComponent<{\n  isDark: boolean;\n} & React.PropsWithChildren> = ({\n  isDark,\n  children,\n}) => {\n  return (\n    <div\n      style={{\n        ...containerStyle,\n        backgroundColor: !isDark ? 'rgba(0, 0, 0, 0.2)' : 'rgba(255, 255, 255, 0.2)',\n        animation: `${keyframes(containerAnimation)} 150ms ease-in-out forwards`,\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n\nconst modalAnimation = `\n0% {transform: translateY(-4px); opacity:.5;}\n100% {transform: translateY(0px); opacity:1;}\n`;\nconst DialogModalComponent = styled('div')`\n  padding: 1.25rem;\n  max-width: 28rem;\n  background-color: ${(props: any) => props.bgcolor || 'white'};\n  color: ${(props: any) => props.color || '#111827'};\n\n  @media (min-width: 576px) {\n    padding: 1.5rem;\n  }\n`;\nconst DialogModal: React.FunctionComponent<{\n  backgroundColor?: string;\n  color?: string;\n} & React.PropsWithChildren> = ({\n  backgroundColor,\n  color,\n  children,\n}) => {\n  return (\n    <DialogModalComponent\n      bgcolor={backgroundColor}\n      color={color}\n      style={{\n        ...modalSharedStyle,\n        animation: `${keyframes(modalAnimation)} 150ms ease-in-out forwards`,\n      }}\n    >\n      {children}\n    </DialogModalComponent>\n  );\n};\n\nconst ChatModalComponent = styled('div')`\n  height: 80vh;\n  max-width: 600px;\n  background-color: ${(props: any) => props.bgcolor || 'white'};\n  position: relative;\n`;\nconst ChatModal: React.FunctionComponent<{\n  backgroundColor?: string;\n} & React.PropsWithChildren> = ({\n  backgroundColor,\n  children,\n}) => {\n  return (\n    <ChatModalComponent\n      bgcolor={backgroundColor}\n      style={{\n        ...modalSharedStyle,\n        animation: `${keyframes(modalAnimation)} 150ms ease-in-out forwards`,\n      }}\n    >\n      {children}\n    </ChatModalComponent>\n  );\n};\n\nconst titleClass = css`\n  font-size: 1.25rem;\n  font-weight: 600;\n  text-align: center;\n`;\n\nconst descriptionClass = css`\n  margin-top: 1rem;\n  font-size: 1rem;\n  text-align: center;\n  opacity: 0.8;\n`;\n\nconst buttonsClass = css`\n  margin-top: 1.5rem;\n  display: flex;\n  flex-direction: column;\n  gap: 0.75rem;\n\n  @media (min-width: 576px) {\n    flex-direction: row;\n  }\n`;\n\ninterface WebViewProps {\n  options: Options;\n}\nconst WebView: React.FunctionComponent<WebViewProps> = ({\n  options,\n}) => {\n  useEffect(() => {\n    const handleMessage = (event: MessageEvent) => {\n      const eventDomain = new URL(event.origin).hostname;\n      if (eventDomain === domain) {\n        try {\n          const data = JSON.parse(event.data);\n          if (data.type === 'close') {\n            close('close');\n          }\n        } catch (e) {\n          console.error('Failed to parse data: ', e);\n        }\n      }\n    };\n    window.addEventListener('message', handleMessage);\n    return () => {\n      window.removeEventListener('message', handleMessage);\n    };\n  }, [options]);\n\n  const url = useMemo(() => {\n    const queryParams = {\n      'ait': options.aiType,\n      'uid': options.userId,\n      'iframe': 'true',\n      'hideclose': 'true',\n    };\n    const ret = `${baseUrl}/chat/${options.slug}?${Object.entries(queryParams).map(([key, value]) => `${key}=${value}`).join('&')}`;\n    return ret;\n  }, [options]);\n\n  return (\n    <>\n      <iframe\n        src={url}\n        width=\"100%\"\n        height=\"100%\"\n        style={{\n          border: 'none',\n          display: 'block',\n        }}\n      />\n      {/* Close button */}\n      <div\n        style={{\n          position: 'absolute',\n          top: 16,\n          right: 10,\n          height: 32,\n          width: 32,\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          cursor: 'pointer',\n        }}\n        onClick={() => {\n          if (!confirm('Are you sure you want to close the chat?')) {\n            return;\n          }\n          close('close');\n        }}\n      >\n        <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\" width=\"24px\" fill=\"#5f6368\">\n          <path d=\"m256-200-56-56 224-224-224-224 56-56 224 224 224-224 56 56-224 224 224 224-56 56-224-224-224 224Z\"/>\n        </svg>\n      </div>\n    </>\n  )\n};\n\nlet mounted = false;\nconst ResubscribeComponent: React.FunctionComponent = () => {\n  const { state, options } = useStore();\n\n  useEffect(() => {\n    mounted = true;\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  const fetched = React.useRef(false);\n  useEffect(() => {\n    if (!options || fetched.current) {\n      return;\n    }\n    if (state === 'confirming') {\n      fetched.current = true;\n      const params = {\n        slug: options.slug,\n        uid: options.userId,\n        ait: options.aiType,\n        brloc: getNavigatorLanguage(),\n      }\n      const url = `${apiUrl}/v1/sessions/consent?${Object.entries(params).map(([key, value]) => `${key}=${value}`).join('&')}`;\n      fetch(\n        url,\n        {\n          cache: 'no-cache',\n          headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n          }\n        },\n      ).catch((e) => {\n        console.error('Failed to fetch consent: ', e);\n      });\n    }\n  }, [options, state]);\n\n  if (state === 'closed') {\n    return null;\n  }\n\n  if (!options) {\n    console.error('No options provided');\n    return null;\n  }\n\n  const {\n    aiType,\n    title,\n    description,\n    primaryButtonText,\n    cancelButtonText,\n    colors,\n  } = options;\n\n  const isDark = !colors?.background ? false : isDarkColor(colors.background);\n\n  if (state === 'confirming') {\n    return (\n      <Container isDark={isDark}>\n        <DialogModal\n          backgroundColor={colors?.background}\n          color={colors?.text}\n        >\n          <div className={cx(titleClass)}>\n            {title || getTitle(aiType)}\n          </div>\n          <div className={cx(descriptionClass)}>\n            {description || getDescription(aiType)}\n          </div>\n          <div className={cx(buttonsClass)}>\n            <Button\n              onClick={() => {\n                close('cancel-consent');\n              }}\n              role=\"button\"\n              tabIndex={0}\n              bgcolor=\"transparent\"\n              color={colors?.text}\n              secondarycolor={colors?.text}\n            >\n              {cancelButtonText || 'Not right now'}\n            </Button>\n            <Button\n              onClick={() => {\n                useStore.setState({ state: 'open' });\n              }}\n              bgcolor={colors?.primary}\n              color={isDark ? colors?.text : colors?.background}\n              role=\"button\"\n              tabIndex={0}\n            >\n              {primaryButtonText || 'Let\\'s chat!'}\n            </Button>\n          </div>\n        </DialogModal>\n      </Container>\n    );\n  }\n\n  return (\n    <Container isDark={isDark}>\n      <ChatModal\n        backgroundColor={colors?.background}\n      >\n        <WebView options={options} />\n      </ChatModal>\n    </Container>\n  );\n};\n\nconst containerStyle: React.CSSProperties = {\n  position: 'fixed',\n  zIndex: 9999,\n  top: 0,\n  left: 0,\n  width: '100%',\n  height: '100%',\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n}\n\nconst modalSharedStyle: React.CSSProperties = {\n  flex: 1,\n  marginLeft: 4,\n  marginRight: 4,\n  borderRadius: 8,\n  overflow: 'hidden',\n  boxShadow: '0 0 10px rgba(0, 0, 0, 0.1)',\n};\n\nlet onClose: CloseFn | null = null;\n/**\n * Open the consent dialog and then start the conversation.\n */\nconst openWithConsent = (options: Options) => {\n  if (!mounted) {\n    console.error('ResubscribeComponent is not mounted');\n  }\n  if (useStore.getState().state !== 'closed') {\n    console.warn('ResubscribeComponent is already open');\n    return;\n  }\n\n  useStore.setState({ state: 'confirming', options });\n  if (options.onClose) {\n    onClose = options.onClose;\n  }\n};\n\nconst close = (via: 'cancel-consent' | 'close') => {\n  if (!mounted) {\n    console.error('ResubscribeComponent is not mounted');\n  }\n  useStore.setState({ state: 'closed', options: null });\n  if (onClose) {\n    onClose(via);\n    onClose = null;\n  }\n};\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n  Component: ResubscribeComponent,\n  openWithConsent,\n  close,\n}","import Color from 'color';\n\nexport const baseUrl = 'https://app.resubscribe.ai';\nexport const apiUrl = 'https://api.resubscribe.ai';\nexport const domain = 'app.resubscribe.ai';\n\nexport const getNavigatorLanguage = (): string | null => {\n  if (navigator.languages && navigator.languages.length) {\n    return navigator.languages[0];\n  } else {\n    return (navigator as any).userLanguage || navigator.language || (navigator as any).browserLanguage || null;\n  }\n};\n\nexport const reduceOpacity = (color: string, opacity: number) => {\n  return Color(color).alpha(opacity).string();\n}\n\nexport const isDarkColor = (color: string) => {\n  return Color(color).isDark();\n};\n\nexport const cx = (...classes: Array<string | null | undefined>) => classes.filter(Boolean).join(' ');"],"mappings":"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","names":["src_exports","__export","src_default","__toCommonJS","import_react","import_goober","import_zustand","import_color","baseUrl","apiUrl","domain","getNavigatorLanguage","reduceOpacity","color","opacity","Color","isDarkColor","cx","classes","React","useStore","set","options","getTitle","aiType","getDescription","Button","props","reduceOpacity","containerAnimation","Container","isDark","children","containerStyle","modalAnimation","DialogModalComponent","DialogModal","backgroundColor","color","modalSharedStyle","ChatModalComponent","ChatModal","titleClass","descriptionClass","buttonsClass","WebView","handleMessage","event","domain","close","e","url","queryParams","baseUrl","key","value","mounted","ResubscribeComponent","state","fetched","params","getNavigatorLanguage","apiUrl","title","description","primaryButtonText","cancelButtonText","colors","isDarkColor","cx","onClose","openWithConsent","via","src_default"]}