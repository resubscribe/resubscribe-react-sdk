{"version":3,"sources":["../src/index.tsx","../src/util.ts","../src/components.tsx"],"sourcesContent":["import React, { useEffect, useMemo } from 'react';\nimport { setup } from 'goober';\nimport { create } from 'zustand';\nimport {\n  AIType, CloseFn, State, api, baseUrl, cx, domain, getDescription, getNavigatorLanguage, getTitle, isDarkColor,\n} from './util';\nimport { Backdrop, Button, DialogModal, ChatModal, globalClasses } from './components';\n\nsetup(React.createElement);\n\nconst useStore = create<{\n  state: State;\n  options: ResubscribeOptions | null;\n  openConsent: (options: ResubscribeOptions) => void;\n  close: () => void;\n}>((set) => ({\n  state: 'closed' as State,\n  options: null as ResubscribeOptions | null,\n  openConsent: (options: ResubscribeOptions) => set({ state: 'confirming', options }),\n  close: () => set({ state: 'closed', options: null }),\n}));\n\ninterface ResubscribeColors {\n  primary: string;\n  text: string;\n  background: string;\n}\n\nexport interface ResubscribeOptions {\n  /**\n   * The slug of the organization\n   */\n  slug: string;\n  /**\n   * The type of AI to use.\n   */\n  aiType: AIType;\n  /**\n   * The user's id to record the conversation.\n   */\n  userId: string;\n  /**\n   * Override for the title in the dialog.\n   */\n  title?: string;\n  /**\n   * Override for the description in the dialog.\n   */\n  description?: string;\n  /**\n   * Override for the primary button text in the dialog.\n   */\n  primaryButtonText?: string;\n  /**\n   * Override for the cancel button text in the dialog.\n   */\n  cancelButtonText?: string;\n  /**\n   * Callback when the component is closed. Use the via parameter to identify how the modal was closed.\n   */\n  onClose?: CloseFn;\n  /**\n   * Color settings.\n   */\n  colors?: ResubscribeColors;\n  /**\n   * Class name customizations.\n   */\n  classNames?: {\n    overlay?: string;\n    modal?: string;\n  }\n}\n\nconst registerConsent = (options: ResubscribeOptions) => {\n  const params: Record<string, any> = {\n    slug: options.slug,\n    uid: options.userId,\n    ait: options.aiType,\n    brloc: getNavigatorLanguage(),\n  }\n  api.get(\n    'sessions/consent',\n    params,\n  ).catch((e) => {\n    console.error('Failed to fetch sessions/consent: ', e);\n  });\n};\n\ninterface WebViewProps {\n  options: ResubscribeOptions;\n}\nconst WebView: React.FunctionComponent<WebViewProps> = ({\n  options,\n}) => {\n  useEffect(() => {\n    const handleMessage = (event: MessageEvent) => {\n      const eventDomain = new URL(event.origin).hostname;\n      if (eventDomain === domain) {\n        try {\n          const data = JSON.parse(event.data);\n          if (data.type === 'close') {\n            close('close');\n          }\n        } catch (e) {\n          console.error('Failed to parse data: ', e);\n        }\n      }\n    };\n    window.addEventListener('message', handleMessage);\n    return () => {\n      window.removeEventListener('message', handleMessage);\n    };\n  }, [options]);\n\n  const url = useMemo(() => {\n    const queryParams = {\n      'ait': options.aiType,\n      'uid': options.userId,\n      'iframe': 'true',\n      'hideclose': 'true',\n    };\n    const ret = `${baseUrl}/chat/${options.slug}?${Object.entries(queryParams).map(([key, value]) => `${key}=${value || ''}`).join('&')}`;\n    return ret;\n  }, [options]);\n\n  return (\n    <>\n      <iframe\n        src={url}\n        width=\"100%\"\n        height=\"100%\"\n        style={{\n          border: 'none',\n          display: 'block',\n        }}\n      />\n      {/* Close button */}\n      <div\n        style={{\n          position: 'absolute',\n          top: 16,\n          right: 10,\n          height: 32,\n          width: 32,\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          cursor: 'pointer',\n        }}\n        onClick={() => {\n          if (!confirm('Are you sure you want to close the chat?')) {\n            return;\n          }\n          close('close');\n        }}\n      >\n        <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\" width=\"24px\" fill=\"#5f6368\">\n          <path d=\"m256-200-56-56 224-224-224-224 56-56 224 224 224-224 56 56-224 224 224 224-56 56-224-224-224 224Z\"/>\n        </svg>\n      </div>\n    </>\n  )\n};\n\nlet mounted = false;\nconst ResubscribeComponent: React.FunctionComponent = () => {\n  const { state, options } = useStore();\n\n  useEffect(() => {\n    mounted = true;\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  const fetched = React.useRef(false);\n  useEffect(() => {\n    if (!options || fetched.current) {\n      return;\n    }\n    if (state === 'confirming') {\n      registerConsent(options);\n    }\n  }, [options, state]);\n\n  if (state === 'closed') {\n    return null;\n  }\n\n  if (!options) {\n    console.error('No options provided');\n    return null;\n  }\n\n  const {\n    aiType,\n    title,\n    description,\n    primaryButtonText,\n    cancelButtonText,\n    colors,\n    classNames,\n  } = options;\n\n  const isDark = !colors?.background ? false : isDarkColor(colors.background);\n\n  if (state === 'confirming') {\n    return (\n      <Backdrop isDark={isDark} className={classNames?.overlay}>\n        <DialogModal\n          backgroundColor={colors?.background}\n          color={colors?.text}\n          className={classNames?.modal}\n        >\n          <div className={cx(globalClasses.title)}>\n            {title || getTitle(aiType)}\n          </div>\n          <div className={cx(globalClasses.description)}>\n            {description || getDescription(aiType)}\n          </div>\n          <div className={cx(globalClasses.buttons)}>\n            <Button\n              onClick={() => {\n                close('cancel-consent');\n              }}\n              role=\"button\"\n              tabIndex={0}\n              bgcolor=\"transparent\"\n              color={colors?.text}\n              secondarycolor={colors?.text}\n            >\n              {cancelButtonText || 'Not right now'}\n            </Button>\n            <Button\n              onClick={() => {\n                useStore.setState({ state: 'open' });\n              }}\n              bgcolor={colors?.primary}\n              color={isDark ? colors?.text : colors?.background}\n              role=\"button\"\n              tabIndex={0}\n            >\n              {primaryButtonText || 'Let\\'s chat!'}\n            </Button>\n          </div>\n        </DialogModal>\n      </Backdrop>\n    );\n  }\n\n  return (\n    <Backdrop\n      isDark={isDark}\n      className={classNames?.overlay}\n    >\n      <ChatModal\n        backgroundColor={colors?.background}\n        className={classNames?.modal}\n      >\n        <WebView options={options} />\n      </ChatModal>\n    </Backdrop>\n  );\n};\n\nlet onClose: CloseFn | null = null;\n/**\n * Open the consent dialog and then start the conversation.\n */\nconst openWithConsent = (options: ResubscribeOptions) => {\n  if (!mounted) {\n    console.error('ResubscribeComponent is not mounted');\n  }\n  if (useStore.getState().state !== 'closed') {\n    console.warn('ResubscribeComponent is already open');\n    return;\n  }\n\n  useStore.setState({ state: 'confirming', options });\n  if (options.onClose) {\n    onClose = options.onClose;\n  }\n};\n\n/**\n * Close the dialog and start the conversation.\n */\nconst close = (via: 'cancel-consent' | 'close') => {\n  if (!mounted) {\n    console.error('ResubscribeComponent is not mounted');\n  }\n  useStore.setState({ state: 'closed', options: null });\n  if (onClose) {\n    onClose(via);\n    onClose = null;\n  }\n};\n\n/**\n * Set the options for the component.\n */\nlet headlessOptions: ResubscribeOptions | null = null;\nconst setOptions = (options: ResubscribeOptions) => {\n  headlessOptions = options;\n};\n\n/**\n * Open the dialog without the consent dialog.\n */\nconst openChat = (partialOptions?: Partial<ResubscribeOptions>) => {\n  if (!headlessOptions) {\n    console.error('No headless options set');\n    return;\n  }\n  \n  if (!mounted) {\n    console.error('ResubscribeComponent is not mounted');\n  }\n  if (useStore.getState().state !== 'closed') {\n    console.warn('ResubscribeComponent is already open');\n    return;\n  }\n\n  const merged = {\n    ...headlessOptions,\n    ...partialOptions,\n  };\n\n  useStore.setState({\n    state: 'open',\n    options: merged,\n  });\n  if (merged.onClose) {\n    onClose = merged.onClose;\n  }\n};\n\n/**\n * Register a consent request.\n */\nconst registerConsentRequest = () => {\n  if (!headlessOptions) {\n    console.error('No headless options set');\n    return;\n  }\n  registerConsent(headlessOptions);\n}\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n  Component: ResubscribeComponent,\n  openWithConsent,\n  close,\n  headless: {\n    setOptions,\n    openChat,\n    registerConsentRequest,\n  },\n}","import Color from 'color';\n\nexport const baseUrl = 'https://app.resubscribe.ai';\nexport const apiUrl = 'https://api.resubscribe.ai';\nexport const domain = 'app.resubscribe.ai';\n\nexport const api = {\n  get: async (path: string, params: Record<string, string | null | undefined>) => {\n    const query = Object.entries(params).map(([key, value]) => `${key}=${value}`).join('&');\n    const url = `${apiUrl}/v1/${path}?${query}`;\n    await fetch(\n      url,\n      {\n        cache: 'no-cache',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        }\n      },\n    );\n  },\n}\n\nexport type AIType = 'intent' | 'churn' | 'delete' | 'subscriber' | 'presubscription' | 'precancel';\n\nexport type CloseFn = (via: 'cancel-consent' | 'close') => void;\n\nexport type State = 'closed' | 'confirming' | 'open';\n\n// TODO: move to server\n/**\n * Get default titles for each AI type.\n */\nexport const getTitle = (aiType: AIType) => {\n  switch (aiType) {\n    case 'intent':\n      return 'Not ready to pay?';\n    case 'churn':\n      return 'We\\'re sorry to see you go';\n    case 'delete':\n      return 'We\\'re sorry to see you go';\n    case 'subscriber':\n      return 'Would you like to tell us about your experience?';\n    case 'presubscription':\n      return 'Can we ask you a few questions?';\n    case 'precancel':\n      return 'Can we ask you a few questions?';\n  }\n};\n\n// TODO: move to server\n/**\n * Get default descriptions for each AI type.\n */\nexport const getDescription = (aiType: AIType) => {\n  switch (aiType) {\n    case 'intent':\n      return 'Can we ask you a few questions? It should only take a few minutes.';\n    case 'churn':\n      return 'Can we ask you a few questions? It should only take a few minutes.';\n    case 'delete':\n      return 'Can we ask you a few questions? It should only take a few minutes.';\n    case 'subscriber':\n      return 'Can we ask you a few questions? It should only take a few minutes.';\n    case 'presubscription':\n      return 'We\\'d love to hear your thoughts. It should only take a few minutes.';\n    case 'precancel':\n      return 'We\\'d love to hear your thoughts. It should only take a few minutes.';\n  }\n}\n\nexport const getNavigatorLanguage = (): string | null => {\n  if (navigator.languages && navigator.languages.length) {\n    return navigator.languages[0];\n  } else {\n    return (navigator as any).userLanguage || navigator.language || (navigator as any).browserLanguage || null;\n  }\n};\n\nexport const reduceOpacity = (color: string, opacity: number) => {\n  return Color(color).alpha(opacity).string();\n}\n\nexport const isDarkColor = (color: string) => {\n  return Color(color).isDark();\n};\n\nexport const cx = (...classes: Array<string | null | undefined>) => classes.filter(Boolean).join(' ');","import React from 'react';\nimport { styled, keyframes, css } from 'goober';\nimport { reduceOpacity } from './util';\n\nexport const Button = styled('div')`\n  flex: 1;\n  text-align: center;\n  padding: 0.5rem 0.75rem;\n  background-color: ${(props: any) => props.bgcolor || '#000'};\n  color: ${(props: any) => props.color || '#fff'};\n  ${props => props.secondarycolor ? `\n    border-width: 1px;\n    border-style: solid;\n    border-color: ${reduceOpacity(props.secondaryColor, 0.3) || '#d4d7de'};\n  ` : `\n    border: none;\n  `}\n  font-size: 0.875rem;\n  font-weight: 600;\n  border-radius: 6px;\n  cursor: pointer;\n`\n\n/**\n * Backdrop component\n */\n\nconst backdropAnimation = keyframes(`\n0% {opacity:.5;}\n100% {opacity:1;}\n`);\n\nconst StyledBackdrop = styled('div')`\n  background-color: ${(props: any) => (props.isdark === '1' ? 'rgba(0, 0, 0, 0.2)' : 'rgba(255, 255, 255, 0.2)')};\n  backdrop-filter: blur(5px);\n  animation: ${backdropAnimation} 150ms ease-in-out forwards;\n\n  position: 'fixed';\n  z-index: 9999;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const Backdrop: React.FunctionComponent<{\n  isDark: boolean;\n  className?: string;\n} & React.PropsWithChildren> = ({\n  isDark,\n  className,\n  children,\n}) => {\n  return (\n    <StyledBackdrop\n      isdark={isDark ? '1' : '0'}\n      className={className}\n    >\n      {children}\n    </StyledBackdrop>\n  );\n};\n\n/**\n * Dialog modal component\n */\n\nconst modalShared = `\nflex: 1;\nmargin-left: 4px;\nmargin-right: 4px;\nborder-radius: 8px;\noverflow: hidden;\nbox-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n`;\n\nconst modalAnimation = keyframes(`\n0% {transform: translateY(-4px); opacity:.5;}\n100% {transform: translateY(0px); opacity:1;}\n`);\n\nconst StyledDialog = styled('div')`\n  ${modalShared}\n  animation: ${modalAnimation} 150ms ease-in-out forwards;\n\n  padding: 1.25rem;\n  max-width: 28rem;\n  background-color: ${(props: any) => props.bgcolor || 'white'};\n  color: ${(props: any) => props.color || '#111827'};\n\n  @media (min-width: 576px) {\n    padding: 1.5rem;\n  }\n`;\n\nexport const DialogModal: React.FunctionComponent<{\n  backgroundColor?: string;\n  color?: string;\n  className?: string;\n} & React.PropsWithChildren> = ({\n  backgroundColor,\n  color,\n  className,\n  children,\n}) => {\n  return (\n    <StyledDialog\n      bgcolor={backgroundColor}\n      color={color}\n      className={className}\n    >\n      {children}\n    </StyledDialog>\n  );\n};\n\nconst StyledChat = styled('div')`\n  ${modalShared}\n  animation: ${modalAnimation} 150ms ease-in-out forwards;\n\n  height: 80vh;\n  max-width: 600px;\n  background-color: ${(props: any) => props.bgcolor || 'white'};\n  position: relative;\n`;\n\nexport const ChatModal: React.FunctionComponent<{\n  backgroundColor?: string;\n  className?: string;\n} & React.PropsWithChildren> = ({\n  backgroundColor,\n  className,\n  children,\n}) => {\n  return (\n    <StyledChat\n      bgcolor={backgroundColor}\n      className={className}\n    >\n      {children}\n    </StyledChat>\n  );\n};\n\nexport const globalClasses = {\n  title: css`\nfont-size: 1.25rem;\nfont-weight: 600;\ntext-align: center;\n`,\n description: css`\nmargin-top: 1rem;\nfont-size: 1rem;\ntext-align: center;\nopacity: 0.8;\n`,\n  buttons: css`\nmargin-top: 1.5rem;\ndisplay: flex;\nflex-direction: column;\ngap: 0.75rem;\n\n@media (min-width: 576px) {\n  flex-direction: row;\n}\n`,\n}"],"mappings":"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","names":["src_exports","__export","src_default","__toCommonJS","import_react","import_goober","import_zustand","import_color","baseUrl","apiUrl","domain","api","path","params","query","key","value","url","getTitle","aiType","getDescription","getNavigatorLanguage","reduceOpacity","color","opacity","Color","isDarkColor","cx","classes","import_react","import_goober","Button","props","reduceOpacity","backdropAnimation","StyledBackdrop","Backdrop","isDark","className","children","React","modalShared","modalAnimation","StyledDialog","DialogModal","backgroundColor","color","StyledChat","ChatModal","globalClasses","React","useStore","set","options","registerConsent","params","getNavigatorLanguage","api","e","WebView","handleMessage","event","domain","close","url","queryParams","baseUrl","key","value","mounted","ResubscribeComponent","state","fetched","aiType","title","description","primaryButtonText","cancelButtonText","colors","classNames","isDark","isDarkColor","Backdrop","DialogModal","cx","globalClasses","getTitle","getDescription","Button","ChatModal","onClose","openWithConsent","via","headlessOptions","setOptions","openChat","partialOptions","merged","registerConsentRequest","src_default"]}